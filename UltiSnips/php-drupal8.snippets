snippet hook_ajax_render_alter "Alter the Ajax command data that is sent to the client."
/**
 * Implements hook_ajax_render_alter().
 */
function hook_ajax_render_alter(&$$data) {
  $1
}
endsnippet

snippet hook_archiver_info_alter "Alter archiver information declared by other modules."
/**
 * Implements hook_archiver_info_alter().
 */
function hook_archiver_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_batch_alter "Alter batch information before a batch is processed."
/**
 * Implements hook_batch_alter().
 */
function hook_batch_alter(&$$batch) {
  $1
}
endsnippet

snippet hook_block_access "Control access to a block instance."
/**
 * Implements hook_block_access().
 */
function hook_block_access($$block
 $$operation
 $$account) {
  $1
}
endsnippet

snippet hook_block_build_alter "Alter the result of \Drupal\Core\Block\BlockBase::build()."
/**
 * Implements hook_block_build_alter().
 */
function hook_block_build_alter(&$$build
 $$block) {
  $1
}
endsnippet

snippet hook_block_build_BASE_BLOCK_ID_alter "Provide a block plugin specific block_build alteration."
/**
 * Implements hook_block_build_BASE_BLOCK_ID_alter().
 */
function hook_block_build_BASE_BLOCK_ID_alter(&$$build
 $$block) {
  $1
}
endsnippet

snippet hook_block_view_alter "Alter the result of \Drupal\Core\Block\BlockBase::build()."
/**
 * Implements hook_block_view_alter().
 */
function hook_block_view_alter(&$$build
 $$block) {
  $1
}
endsnippet

snippet hook_block_view_BASE_BLOCK_ID_alter "Provide a block plugin specific block_view alteration."
/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function hook_block_view_BASE_BLOCK_ID_alter(&$$build
 $$block) {
  $1
}
endsnippet

snippet hook_cache_flush "Flush all persistent and static caches."
/**
 * Implements hook_cache_flush().
 */
function hook_cache_flush() {
  $1
}
endsnippet

snippet hook_ckeditor_css_alter "Modify the list of CSS files that will be added to a CKEditor instance."
/**
 * Implements hook_ckeditor_css_alter().
 */
function hook_ckeditor_css_alter(&$$css
 $$editor) {
  $1
}
endsnippet

snippet hook_ckeditor_plugin_info_alter "Modify the list of available CKEditor plugins."
/**
 * Implements hook_ckeditor_plugin_info_alter().
 */
function hook_ckeditor_plugin_info_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_comment_links_alter "Alter the links of a comment."
/**
 * Implements hook_comment_links_alter().
 */
function hook_comment_links_alter(&$$links
 $$entity
 &$$context) {
  $1
}
endsnippet

snippet hook_config_import_steps_alter "Alter the configuration synchronization steps."
/**
 * Implements hook_config_import_steps_alter().
 */
function hook_config_import_steps_alter(&$$sync_steps
 $$config_importer) {
  $1
}
endsnippet

snippet hook_config_schema_info_alter "Alter config typed data definitions."
/**
 * Implements hook_config_schema_info_alter().
 */
function hook_config_schema_info_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_config_translation_info "Introduce dynamic translation tabs for translation of configuration."
/**
 * Implements hook_config_translation_info().
 */
function hook_config_translation_info(&$$info) {
  $1
}
endsnippet

snippet hook_config_translation_info_alter "Alter existing translation tabs for translation of configuration."
/**
 * Implements hook_config_translation_info_alter().
 */
function hook_config_translation_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_contextual_links_alter "Alter contextual links before they are rendered."
/**
 * Implements hook_contextual_links_alter().
 */
function hook_contextual_links_alter(&$$links
 $$group
 $$route_parameters) {
  $1
}
endsnippet

snippet hook_contextual_links_plugins_alter "Alter the plugin definition of contextual links."
/**
 * Implements hook_contextual_links_plugins_alter().
 */
function hook_contextual_links_plugins_alter(&$$contextual_links) {
  $1
}
endsnippet

snippet hook_contextual_links_view_alter "Alter a contextual links element before it is rendered."
/**
 * Implements hook_contextual_links_view_alter().
 */
function hook_contextual_links_view_alter(&$$element
 $$items) {
  $1
}
endsnippet

snippet hook_countries_alter "Alter the default country list."
/**
 * Implements hook_countries_alter().
 */
function hook_countries_alter(&$$countries) {
  $1
}
endsnippet

snippet hook_cron "Perform periodic actions."
/**
 * Implements hook_cron().
 */
function hook_cron() {
  $1
}
endsnippet

snippet hook_css_alter "Alter CSS files before they are output on the page."
/**
 * Implements hook_css_alter().
 */
function hook_css_alter(&$$css
 $$assets) {
  $1
}
endsnippet

snippet hook_data_type_info_alter "Alter available data types for typed data wrappers."
/**
 * Implements hook_data_type_info_alter().
 */
function hook_data_type_info_alter(&$$data_types) {
  $1
}
endsnippet

snippet hook_display_variant_plugin_alter "Alter display variant plugin definitions."
/**
 * Implements hook_display_variant_plugin_alter().
 */
function hook_display_variant_plugin_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_editor_info_alter "Performs alterations on text editor definitions."
/**
 * Implements hook_editor_info_alter().
 */
function hook_editor_info_alter(&$$editors) {
  $1
}
endsnippet

snippet hook_editor_js_settings_alter "Modifies JavaScript settings that are added for text editors."
/**
 * Implements hook_editor_js_settings_alter().
 */
function hook_editor_js_settings_alter(&$$settings) {
  $1
}
endsnippet

snippet hook_editor_xss_filter_alter "Modifies the text editor XSS filter that will used for the given text format."
/**
 * Implements hook_editor_xss_filter_alter().
 */
function hook_editor_xss_filter_alter(&$$editor_xss_filter_class
 $$format
 $$original_format = NULL) {
  $1
}
endsnippet

snippet hook_element_info_alter "Alter the element type information returned from modules."
/**
 * Implements hook_element_info_alter().
 */
function hook_element_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_entity_access "Control entity operation access."
/**
 * Implements hook_entity_access().
 */
function hook_entity_access($$entity
 $$operation
 $$account) {
  $1
}
endsnippet

snippet hook_entity_base_field_info "Provides custom base field definitions for a content entity type."
/**
 * Implements hook_entity_base_field_info().
 */
function hook_entity_base_field_info($$entity_type) {
  $1
}
endsnippet

snippet hook_entity_base_field_info_alter "Alter base field definitions for a content entity type."
/**
 * Implements hook_entity_base_field_info_alter().
 */
function hook_entity_base_field_info_alter(&$$fields
 $$entity_type) {
  $1
}
endsnippet

snippet hook_entity_build_defaults_alter "Alter entity renderable values before cache checking in drupal_render()."
/**
 * Implements hook_entity_build_defaults_alter().
 */
function hook_entity_build_defaults_alter(&$$build
 $$entity
 $$view_mode) {
  $1
}
endsnippet

snippet hook_entity_bundle_create "Act on entity_bundle_create()."
/**
 * Implements hook_entity_bundle_create().
 */
function hook_entity_bundle_create($$entity_type_id
 $$bundle) {
  $1
}
endsnippet

snippet hook_entity_bundle_delete "Act on entity_bundle_delete()."
/**
 * Implements hook_entity_bundle_delete().
 */
function hook_entity_bundle_delete($$entity_type_id
 $$bundle) {
  $1
}
endsnippet

snippet hook_entity_bundle_field_info "Provides field definitions for a specific bundle within an entity type."
/**
 * Implements hook_entity_bundle_field_info().
 */
function hook_entity_bundle_field_info($$entity_type
 $$bundle
 $$base_field_definitions) {
  $1
}
endsnippet

snippet hook_entity_bundle_field_info_alter "Alter bundle field definitions."
/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function hook_entity_bundle_field_info_alter(&$$fields
 $$entity_type
 $$bundle) {
  $1
}
endsnippet

snippet hook_entity_bundle_info "Describe the bundles for entity types."
/**
 * Implements hook_entity_bundle_info().
 */
function hook_entity_bundle_info() {
  $1
}
endsnippet

snippet hook_entity_bundle_info_alter "Alter the bundles for entity types."
/**
 * Implements hook_entity_bundle_info_alter().
 */
function hook_entity_bundle_info_alter(&$$bundles) {
  $1
}
endsnippet

snippet hook_entity_create "Acts when creating a new entity."
/**
 * Implements hook_entity_create().
 */
function hook_entity_create($$entity) {
  $1
}
endsnippet

snippet hook_entity_create_access "Control entity create access."
/**
 * Implements hook_entity_create_access().
 */
function hook_entity_create_access($$account
 $$context
 $$entity_bundle) {
  $1
}
endsnippet

snippet hook_entity_delete "Respond to entity deletion."
/**
 * Implements hook_entity_delete().
 */
function hook_entity_delete($$entity) {
  $1
}
endsnippet

snippet hook_entity_display_build_alter "Alter the render array generated by an EntityDisplay for an entity."
/**
 * Implements hook_entity_display_build_alter().
 */
function hook_entity_display_build_alter(&$$build
 $$context) {
  $1
}
endsnippet

snippet hook_entity_extra_field_info "Exposes 'pseudo-field' components on content entities."
/**
 * Implements hook_entity_extra_field_info().
 */
function hook_entity_extra_field_info() {
  $1
}
endsnippet

snippet hook_entity_extra_field_info_alter "Alter 'pseudo-field' components on content entities."
/**
 * Implements hook_entity_extra_field_info_alter().
 */
function hook_entity_extra_field_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_entity_field_access "Control access to fields."
/**
 * Implements hook_entity_field_access().
 */
function hook_entity_field_access($$operation
 $$field_definition
 $$account
 $$items = NULL) {
  $1
}
endsnippet

snippet hook_entity_field_access_alter "Alter the default access behavior for a given field."
/**
 * Implements hook_entity_field_access_alter().
 */
function hook_entity_field_access_alter(&$$grants
 $$context) {
  $1
}
endsnippet

snippet hook_entity_field_storage_info "Provides field storage definitions for a content entity type."
/**
 * Implements hook_entity_field_storage_info().
 */
function hook_entity_field_storage_info($$entity_type) {
  $1
}
endsnippet

snippet hook_entity_field_storage_info_alter "Alter field storage definitions for a content entity type."
/**
 * Implements hook_entity_field_storage_info_alter().
 */
function hook_entity_field_storage_info_alter(&$$fields
 $$entity_type) {
  $1
}
endsnippet

snippet hook_entity_field_values_init "Acts when initializing a fieldable entity object."
/**
 * Implements hook_entity_field_values_init().
 */
function hook_entity_field_values_init($$entity) {
  $1
}
endsnippet

snippet hook_entity_form_display_alter "Alter the settings used for displaying an entity form."
/**
 * Implements hook_entity_form_display_alter().
 */
function hook_entity_form_display_alter($$form_display
 $$context) {
  $1
}
endsnippet

snippet hook_entity_insert "Respond to creation of a new entity."
/**
 * Implements hook_entity_insert().
 */
function hook_entity_insert($$entity) {
  $1
}
endsnippet

snippet hook_entity_load "Act on entities when loaded."
/**
 * Implements hook_entity_load().
 */
function hook_entity_load($$entity_type_id) {
  $1
}
endsnippet

snippet hook_entity_operation "Declares entity operations."
/**
 * Implements hook_entity_operation().
 */
function hook_entity_operation($$entity) {
  $1
}
endsnippet

snippet hook_entity_operation_alter "Alter entity operations."
/**
 * Implements hook_entity_operation_alter().
 */
function hook_entity_operation_alter(&$$operations
 $$entity) {
  $1
}
endsnippet

snippet hook_entity_predelete "Act before entity deletion."
/**
 * Implements hook_entity_predelete().
 */
function hook_entity_predelete($$entity) {
  $1
}
endsnippet

snippet hook_entity_prepare_form "Acts on an entity object about to be shown on an entity form."
/**
 * Implements hook_entity_prepare_form().
 */
function hook_entity_prepare_form($$entity
 $$operation
 $$form_state) {
  $1
}
endsnippet

snippet hook_entity_prepare_view "Act on entities as they are being prepared for view."
/**
 * Implements hook_entity_prepare_view().
 */
function hook_entity_prepare_view($$entity_type_id
 $$entities
 $$displays
 $$view_mode) {
  $1
}
endsnippet

snippet hook_entity_presave "Act on an entity before it is created or updated."
/**
 * Implements hook_entity_presave().
 */
function hook_entity_presave($$entity) {
  $1
}
endsnippet

snippet hook_entity_revision_delete "Respond to entity revision deletion."
/**
 * Implements hook_entity_revision_delete().
 */
function hook_entity_revision_delete($$entity) {
  $1
}
endsnippet

snippet hook_entity_storage_load "Respond to entity revision deletion."
/**
 * Implements hook_entity_storage_load().
 */
function hook_entity_storage_load($$entity
 $$entity_type) {
  $1
}
endsnippet

snippet hook_entity_translation_create "Acts when creating a new entity translation."
/**
 * Implements hook_entity_translation_create().
 */
function hook_entity_translation_create($$translation) {
  $1
}
endsnippet

snippet hook_entity_translation_delete "Respond to entity translation deletion."
/**
 * Implements hook_entity_translation_delete().
 */
function hook_entity_translation_delete($$translation) {
  $1
}
endsnippet

snippet hook_entity_translation_insert "Respond to creation of a new entity translation."
/**
 * Implements hook_entity_translation_insert().
 */
function hook_entity_translation_insert($$translation) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_access "Control entity operation access for a specific entity type."
/**
 * Implements hook_ENTITY_TYPE_access().
 */
function hook_ENTITY_TYPE_access($$entity
 $$operation
 $$account) {
  $1
}
endsnippet

snippet hook_entity_type_alter "Alter the entity type definitions."
/**
 * Implements hook_entity_type_alter().
 */
function hook_entity_type_alter(&$$entity_types) {
  $1
}
endsnippet

snippet hook_entity_type_build "Add to entity type definitions."
/**
 * Implements hook_entity_type_build().
 */
function hook_entity_type_build(&$$entity_types) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_build_defaults_alter "Alter entity renderable values before cache checking in drupal_render()."
/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter().
 */
function hook_ENTITY_TYPE_build_defaults_alter(&$$build
 $$entity
 $$view_mode) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_create "Acts when creating a new entity of a specific type."
/**
 * Implements hook_ENTITY_TYPE_create().
 */
function hook_ENTITY_TYPE_create($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_create_access "Control entity create access for a specific entity type."
/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function hook_ENTITY_TYPE_create_access($$account
 $$context
 $$entity_bundle) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_delete "Respond to entity deletion of a particular type."
/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function hook_ENTITY_TYPE_delete($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_field_values_init "Acts when initializing a fieldable entity object."
/**
 * Implements hook_ENTITY_TYPE_field_values_init().
 */
function hook_ENTITY_TYPE_field_values_init($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_insert "Respond to creation of a new entity of a particular type."
/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hook_ENTITY_TYPE_insert($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_load "Act on entities of a specific type when loaded."
/**
 * Implements hook_ENTITY_TYPE_load().
 */
function hook_ENTITY_TYPE_load($$entities) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_predelete "Act before entity deletion of a particular entity type."
/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function hook_ENTITY_TYPE_predelete($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_prepare_form "Acts on a particular type of entity object about to be in an entity form."
/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function hook_ENTITY_TYPE_prepare_form($$entity
 $$operation
 $$form_state) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_presave "Act on a specific type of entity before it is created or updated."
/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hook_ENTITY_TYPE_presave($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_revision_delete "Respond to entity revision deletion of a particular type."
/**
 * Implements hook_ENTITY_TYPE_revision_delete().
 */
function hook_ENTITY_TYPE_revision_delete($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_storage_load "Act on content entities of a given type when loaded from the storage."
/**
 * Implements hook_ENTITY_TYPE_storage_load().
 */
function hook_ENTITY_TYPE_storage_load($$entities) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_translation_create "Acts when creating a new entity translation of a specific type."
/**
 * Implements hook_ENTITY_TYPE_translation_create().
 */
function hook_ENTITY_TYPE_translation_create($$translation) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_translation_delete "Respond to entity translation deletion of a particular type."
/**
 * Implements hook_ENTITY_TYPE_translation_delete().
 */
function hook_ENTITY_TYPE_translation_delete($$translation) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_translation_insert "Respond to creation of a new entity translation of a particular type."
/**
 * Implements hook_ENTITY_TYPE_translation_insert().
 */
function hook_ENTITY_TYPE_translation_insert($$translation) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_update "Respond to updates to an entity of a particular type."
/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hook_ENTITY_TYPE_update($$entity) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_view "Act on entities of a particular type being assembled before rendering."
/**
 * Implements hook_ENTITY_TYPE_view().
 */
function hook_ENTITY_TYPE_view(&$$build
 $$entity
 $$display
 $$view_mode) {
  $1
}
endsnippet

snippet hook_ENTITY_TYPE_view_alter "Alter the results of the entity build array for a particular entity type."
/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function hook_ENTITY_TYPE_view_alter(&$$build
 $$entity
 $$display) {
  $1
}
endsnippet

snippet hook_entity_update "Respond to updates to an entity."
/**
 * Implements hook_entity_update().
 */
function hook_entity_update($$entity) {
  $1
}
endsnippet

snippet hook_entity_view "Act on entities being assembled before rendering."
/**
 * Implements hook_entity_view().
 */
function hook_entity_view(&$$build
 $$entity
 $$display
 $$view_mode) {
  $1
}
endsnippet

snippet hook_entity_view_alter "Alter the results of the entity build array."
/**
 * Implements hook_entity_view_alter().
 */
function hook_entity_view_alter(&$$build
 $$entity
 $$display) {
  $1
}
endsnippet

snippet hook_entity_view_display_alter "Alter the settings used for displaying an entity."
/**
 * Implements hook_entity_view_display_alter().
 */
function hook_entity_view_display_alter($$display
 $$context) {
  $1
}
endsnippet

snippet hook_entity_view_mode_alter "Change the view mode of an entity that is being displayed."
/**
 * Implements hook_entity_view_mode_alter().
 */
function hook_entity_view_mode_alter(&$$view_mode
 $$entity
 $$context) {
  $1
}
endsnippet

snippet hook_entity_view_mode_info_alter "Alter the view modes for entity types."
/**
 * Implements hook_entity_view_mode_info_alter().
 */
function hook_entity_view_mode_info_alter(&$$view_modes) {
  $1
}
endsnippet

snippet hook_extension "Declare a template file extension to be used with a theme engine."
/**
 * Implements hook_extension().
 */
function hook_extension() {
  $1
}
endsnippet

snippet hook_field_formatter_info_alter "Perform alterations on Field API formatter types."
/**
 * Implements hook_field_formatter_info_alter().
 */
function hook_field_formatter_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_field_info_max_weight "Returns the maximum weight for the entity components handled by the module."
/**
 * Implements hook_field_info_max_weight().
 */
function hook_field_info_max_weight($$entity_type
 $$bundle
 $$context
 $$context_mode) {
  $1
}
endsnippet

snippet hook_field_purge_field "Acts when a field is being purged."
/**
 * Implements hook_field_purge_field().
 */
function hook_field_purge_field($$field) {
  $1
}
endsnippet

snippet hook_field_purge_field_storage "Acts when a field storage definition is being purged."
/**
 * Implements hook_field_purge_field_storage().
 */
function hook_field_purge_field_storage($$field_storage) {
  $1
}
endsnippet

snippet hook_field_storage_config_update_forbid "Forbid a field storage update from occurring."
/**
 * Implements hook_field_storage_config_update_forbid().
 */
function hook_field_storage_config_update_forbid($$field_storage
 $$prior_field_storage) {
  $1
}
endsnippet

snippet hook_field_ui_preconfigured_options_alter "Perform alterations on preconfigured field options."
/**
 * Implements hook_field_ui_preconfigured_options_alter().
 */
function hook_field_ui_preconfigured_options_alter(&$$options
 $$field_type) {
  $1
}
endsnippet

snippet hook_field_views_data "Override the default Views data for a Field API field."
/**
 * Implements hook_field_views_data().
 */
function hook_field_views_data($$field_storage) {
  $1
}
endsnippet

snippet hook_field_views_data_alter "Alter the Views data for a single Field API field."
/**
 * Implements hook_field_views_data_alter().
 */
function hook_field_views_data_alter(&$$data
 $$field_storage) {
  $1
}
endsnippet

snippet hook_field_views_data_views_data_alter "Alter the Views data on a per field basis."
/**
 * Implements hook_field_views_data_views_data_alter().
 */
function hook_field_views_data_views_data_alter(&$$data
 $$field) {
  $1
}
endsnippet

snippet hook_field_widget_form_alter "Alter forms for field widgets provided by other modules."
/**
 * Implements hook_field_widget_form_alter().
 */
function hook_field_widget_form_alter(&$$element
 $$form_state
 $$context) {
  $1
}
endsnippet

snippet hook_field_widget_info_alter "Perform alterations on Field API widget types."
/**
 * Implements hook_field_widget_info_alter().
 */
function hook_field_widget_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_field_widget_multivalue_form_alter "Alter forms for multi-value field widgets provided by other modules."
/**
 * Implements hook_field_widget_multivalue_form_alter().
 */
function hook_field_widget_multivalue_form_alter(&$$elements
 $$form_state
 $$context) {
  $1
}
endsnippet

snippet hook_field_widget_multivalue_WIDGET_TYPE_form_alter "Alter multi-value widget forms for a widget provided by another module."
/**
 * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().
 */
function hook_field_widget_multivalue_WIDGET_TYPE_form_alter(&$$info) {
  $1
}
endsnippet

snippet hook_field_widget_WIDGET_TYPE_form_alter "Alter widget forms for a specific widget provided by another module."
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function hook_field_widget_WIDGET_TYPE_form_alter(&$$elements
 $$form_state
 $$context) {
  $1
}
endsnippet

snippet hook_filetransfer_info "Register information about FileTransfer classes provided by a module."
/**
 * Implements hook_filetransfer_info().
 */
function hook_filetransfer_info() {
  $1
}
endsnippet

snippet hook_filetransfer_info_alter "Alter the FileTransfer class registry."
/**
 * Implements hook_filetransfer_info_alter().
 */
function hook_filetransfer_info_alter(&$$filetransfer_info) {
  $1
}
endsnippet

snippet hook_file_copy "Respond to a file that has been copied."
/**
 * Implements hook_file_copy().
 */
function hook_file_copy($$file
 $$source) {
  $1
}
endsnippet

snippet hook_file_download "Control access to private file downloads and specify HTTP headers."
/**
 * Implements hook_file_download().
 */
function hook_file_download($$uri) {
  $1
}
endsnippet

snippet hook_file_mimetype_mapping_alter "Alter MIME type mappings used to determine MIME type from a file extension."
/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function hook_file_mimetype_mapping_alter(&$$mapping) {
  $1
}
endsnippet

snippet hook_file_move "Respond to a file that has been moved."
/**
 * Implements hook_file_move().
 */
function hook_file_move($$file
 $$source) {
  $1
}
endsnippet

snippet hook_file_url_alter "Alter the URL to a file."
/**
 * Implements hook_file_url_alter().
 */
function hook_file_url_alter(&$$uri) {
  $1
}
endsnippet

snippet hook_file_validate "Check that files meet a given criteria."
/**
 * Implements hook_file_validate().
 */
function hook_file_validate($$file) {
  $1
}
endsnippet

snippet hook_filter_format_disable "Perform actions when a text format has been disabled."
/**
 * Implements hook_filter_format_disable().
 */
function hook_filter_format_disable($$format) {
  $1
}
endsnippet

snippet hook_filter_info_alter "Perform alterations on filter definitions."
/**
 * Implements hook_filter_info_alter().
 */
function hook_filter_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_filter_secure_image_alter "Alters images with an invalid source."
/**
 * Implements hook_filter_secure_image_alter().
 */
function hook_filter_secure_image_alter(&$$image) {
  $1
}
endsnippet

snippet hook_form_alter "Perform alterations before a form is rendered."
/**
 * Implements hook_form_alter().
 */
function hook_form_alter(&$$form
 $$form_state
 $$form_id) {
  $1
}
endsnippet

snippet hook_form_BASE_FORM_ID_alter "Provide a form-specific alteration for shared ('base') forms."
/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hook_form_BASE_FORM_ID_alter(&$$form
 $$form_state
 $$form_id) {
  $1
}
endsnippet

snippet hook_form_FORM_ID_alter "Provide a form-specific alteration instead of the global hook_form_alter()."
/**
 * Implements hook_form_FORM_ID_alter().
 */
function hook_form_FORM_ID_alter(&$$form
 $$form_state
 $$form_id) {
  $1
}
endsnippet

snippet hook_form_system_theme_settings_alter "Allow themes to alter the theme-specific settings form."
/**
 * Implements hook_form_system_theme_settings_alter().
 */
function hook_form_system_theme_settings_alter(&$$form
 $$form_state) {
  $1
}
endsnippet

snippet hook_hal_relation_uri_alter "Alter the HAL relation URI."
/**
 * Implements hook_hal_relation_uri_alter().
 */
function hook_hal_relation_uri_alter(&$$uri
 $$context = []) {
  $1
}
endsnippet

snippet hook_hal_type_uri_alter "Alter the HAL type URI."
/**
 * Implements hook_hal_type_uri_alter().
 */
function hook_hal_type_uri_alter(&$$uri
 $$context = []) {
  $1
}
endsnippet

snippet hook_help "Provide online user help."
/**
 * Implements hook_help().
 */
function hook_help($$route_name
 $$route_match) {
  $1
}
endsnippet

snippet hook_help_section_info_alter "Perform alterations on help page section plugin definitions."
/**
 * Implements hook_help_section_info_alter().
 */
function hook_help_section_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_hook_info "Defines one or more hooks that are exposed by a module."
/**
 * Implements hook_hook_info().
 */
function hook_hook_info() {
  $1
}
endsnippet

snippet hook_image_effect_info_alter "Alter the information provided in \Drupal\image\Annotation\ImageEffect."
/**
 * Implements hook_image_effect_info_alter().
 */
function hook_image_effect_info_alter(&$$effects) {
  $1
}
endsnippet

snippet hook_image_style_flush "Respond to image style flushing."
/**
 * Implements hook_image_style_flush().
 */
function hook_image_style_flush($$style) {
  $1
}
endsnippet

snippet hook_install "Perform setup tasks when the module is installed."
/**
 * Implements hook_install().
 */
function hook_install() {
  $1
}
endsnippet

snippet hook_install_tasks "Return an array of tasks to be performed by an installation profile."
/**
 * Implements hook_install_tasks().
 */
function hook_install_tasks(&$$install_state) {
  $1
}
endsnippet

snippet hook_install_tasks_alter "Alter the full list of installation tasks."
/**
 * Implements hook_install_tasks_alter().
 */
function hook_install_tasks_alter(&$$tasks
 $$install_state) {
  $1
}
endsnippet

snippet hook_js_alter "Perform necessary alterations to the JavaScript before it is presented on the page."
/**
 * Implements hook_js_alter().
 */
function hook_js_alter(&$$javascript
 $$assets) {
  $1
}
endsnippet

snippet hook_js_settings_alter "Perform necessary alterations to the JavaScript settings (drupalSettings)."
/**
 * Implements hook_js_settings_alter().
 */
function hook_js_settings_alter(&$$settings
 $$assets) {
  $1
}
endsnippet

snippet hook_js_settings_build "hook_js_settings_build"
/**
 * Implements hook_js_settings_build().
 */
function hook_js_settings_build(&$$settings
 $$assets) {
  $1
}
endsnippet

snippet hook_language_fallback_candidates_alter "Allow modules to alter the language fallback candidates."
/**
 * Implements hook_language_fallback_candidates_alter().
 */
function hook_language_fallback_candidates_alter(&$$candidates
 $$context) {
  $1
}
endsnippet

snippet hook_language_fallback_candidates_OPERATION_alter "Allow modules to alter the fallback candidates for specific operations."
/**
 * Implements hook_language_fallback_candidates_OPERATION_alter().
 */
function hook_language_fallback_candidates_OPERATION_alter(&$$candidates
 $$context) {
  $1
}
endsnippet

snippet hook_language_negotiation_info_alter "Perform alterations on language negotiation methods."
/**
 * Implements hook_language_negotiation_info_alter().
 */
function hook_language_negotiation_info_alter(&$$negotiation_info) {
  $1
}
endsnippet

snippet hook_language_switch_links_alter "Perform alterations on language switcher links."
/**
 * Implements hook_language_switch_links_alter().
 */
function hook_language_switch_links_alter(&$$links
 $$type
 $$url) {
  $1
}
endsnippet

snippet hook_language_types_info "Define language types."
/**
 * Implements hook_language_types_info().
 */
function hook_language_types_info() {
  $1
}
endsnippet

snippet hook_language_types_info_alter "Perform alterations on language types."
/**
 * Implements hook_language_types_info_alter().
 */
function hook_language_types_info_alter(&$$language_types) {
  $1
}
endsnippet

snippet hook_layout_alter "Allow modules to alter layout plugin definitions."
/**
 * Implements hook_layout_alter().
 */
function hook_layout_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_library_info_alter "Alter libraries provided by an extension."
/**
 * Implements hook_library_info_alter().
 */
function hook_library_info_alter(&$$libraries
 $$extension) {
  $1
}
endsnippet

snippet hook_library_info_build "Add dynamic library definitions."
/**
 * Implements hook_library_info_build().
 */
function hook_library_info_build() {
  $1
}
endsnippet

snippet hook_link_alter "Alter the parameters for links."
/**
 * Implements hook_link_alter().
 */
function hook_link_alter(&$$variables) {
  $1
}
endsnippet

snippet hook_locale_translation_projects_alter "Alter the list of projects to be updated by locale's interface translation."
/**
 * Implements hook_locale_translation_projects_alter().
 */
function hook_locale_translation_projects_alter(&$$projects) {
  $1
}
endsnippet

snippet hook_local_tasks_alter "Alter local tasks plugins."
/**
 * Implements hook_local_tasks_alter().
 */
function hook_local_tasks_alter(&$$local_tasks) {
  $1
}
endsnippet

snippet hook_mail "Prepares a message based on parameters;"
/**
 * Implements hook_mail().
 */
function hook_mail($$key
 &$$message
 $$params) {
  $1
}
endsnippet

snippet hook_mail_alter "Alter an email message created with MailManagerInterface->mail()."
/**
 * Implements hook_mail_alter().
 */
function hook_mail_alter(&$$message) {
  $1
}
endsnippet

snippet hook_mail_backend_info_alter "Alter the list of mail backend plugin definitions."
/**
 * Implements hook_mail_backend_info_alter().
 */
function hook_mail_backend_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_media_source_info_alter "Alters the information provided in \Drupal\media\Annotation\MediaSource."
/**
 * Implements hook_media_source_info_alter().
 */
function hook_media_source_info_alter(&$$sources) {
  $1
}
endsnippet

snippet hook_menu_links_discovered_alter "Alters all the menu links discovered by the menu link plugin manager."
/**
 * Implements hook_menu_links_discovered_alter().
 */
function hook_menu_links_discovered_alter(&$$links) {
  $1
}
endsnippet

snippet hook_menu_local_actions_alter "Alter local actions plugins."
/**
 * Implements hook_menu_local_actions_alter().
 */
function hook_menu_local_actions_alter(&$$local_actions) {
  $1
}
endsnippet

snippet hook_menu_local_tasks_alter "Alter local tasks displayed on the page before they are rendered."
/**
 * Implements hook_menu_local_tasks_alter().
 */
function hook_menu_local_tasks_alter(&$$data
 $$route_name) {
  $1
}
endsnippet

snippet hook_migrate_MIGRATION_ID_prepare_row "Allows adding data to a row for a migration with the specified ID."
/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row().
 */
function hook_migrate_MIGRATION_ID_prepare_row($$row
 $$source
 $$migration) {
  $1
}
endsnippet

snippet hook_migrate_prepare_row "Allows adding data to a row before processing it."
/**
 * Implements hook_migrate_prepare_row().
 */
function hook_migrate_prepare_row($$row
 $$source
 $$migration) {
  $1
}
endsnippet

snippet hook_migration_plugins_alter "Allows altering the list of discovered migration plugins."
/**
 * Implements hook_migration_plugins_alter().
 */
function hook_migration_plugins_alter(&$$migrations) {
  $1
}
endsnippet

snippet hook_modules_installed "Perform necessary actions after modules are installed."
/**
 * Implements hook_modules_installed().
 */
function hook_modules_installed($$modules) {
  $1
}
endsnippet

snippet hook_modules_uninstalled "Perform necessary actions after modules are uninstalled."
/**
 * Implements hook_modules_uninstalled().
 */
function hook_modules_uninstalled($$modules) {
  $1
}
endsnippet

snippet hook_module_implements_alter "Alter the registry of modules implementing a hook."
/**
 * Implements hook_module_implements_alter().
 */
function hook_module_implements_alter(&$$implementations
 $$hook) {
  $1
}
endsnippet

snippet hook_module_preinstall "Perform necessary actions before a module is installed."
/**
 * Implements hook_module_preinstall().
 */
function hook_module_preinstall($$module) {
  $1
}
endsnippet

snippet hook_module_preuninstall "Perform necessary actions before a module is uninstalled."
/**
 * Implements hook_module_preuninstall().
 */
function hook_module_preuninstall($$module) {
  $1
}
endsnippet

snippet hook_node_access "Controls access to a node."
/**
 * Implements hook_node_access().
 */
function hook_node_access($$node
 $$op
 $$account) {
  $1
}
endsnippet

snippet hook_node_access_records "Set permissions for a node to be written to the database."
/**
 * Implements hook_node_access_records().
 */
function hook_node_access_records($$node) {
  $1
}
endsnippet

snippet hook_node_access_records_alter "Alter permissions for a node before it is written to the database."
/**
 * Implements hook_node_access_records_alter().
 */
function hook_node_access_records_alter(&$$grants
 $$node) {
  $1
}
endsnippet

snippet hook_node_grants "Inform the node access system what permissions the user has."
/**
 * Implements hook_node_grants().
 */
function hook_node_grants($$account
 $$op) {
  $1
}
endsnippet

snippet hook_node_grants_alter "Alter user access rules when trying to view
 edit or delete a node."
/**
 * Implements hook_node_grants_alter().
 */
function hook_node_grants_alter(&$$grants
 $$account
 $$op) {
  $1
}
endsnippet

snippet hook_node_links_alter "Alter the links of a node."
/**
 * Implements hook_node_links_alter().
 */
function hook_node_links_alter(&$$links
 $$entity
 &$$context) {
  $1
}
endsnippet

snippet hook_node_search_result "Act on a node being displayed as a search result."
/**
 * Implements hook_node_search_result().
 */
function hook_node_search_result($$node) {
  $1
}
endsnippet

snippet hook_node_update_index "Act on a node being indexed for searching."
/**
 * Implements hook_node_update_index().
 */
function hook_node_update_index($$node) {
  $1
}
endsnippet

snippet hook_options_list_alter "Alters the list of options to be displayed for a field."
/**
 * Implements hook_options_list_alter().
 */
function hook_options_list_alter(&$$options
 $$context) {
  $1
}
endsnippet

snippet hook_page_attachments "Add attachments (typically assets) to a page before it is rendered."
/**
 * Implements hook_page_attachments().
 */
function hook_page_attachments(&$$attachments) {
  $1
}
endsnippet

snippet hook_page_attachments_alter "Alter attachments (typically assets) to a page before it is rendered."
/**
 * Implements hook_page_attachments_alter().
 */
function hook_page_attachments_alter(&$$attachments) {
  $1
}
endsnippet

snippet hook_page_bottom "Add a renderable array to the bottom of the page."
/**
 * Implements hook_page_bottom().
 */
function hook_page_bottom(&$$page_bottom) {
  $1
}
endsnippet

snippet hook_page_top "Add a renderable array to the top of the page."
/**
 * Implements hook_page_top().
 */
function hook_page_top(&$$page_top) {
  $1
}
endsnippet

snippet hook_path_delete "Respond to a path being deleted."
/**
 * Implements hook_path_delete().
 */
function hook_path_delete($$path) {
  $1
}
endsnippet

snippet hook_path_insert "Respond to a path being inserted."
/**
 * Implements hook_path_insert().
 */
function hook_path_insert($$path) {
  $1
}
endsnippet

snippet hook_path_update "Respond to a path being updated."
/**
 * Implements hook_path_update().
 */
function hook_path_update($$path) {
  $1
}
endsnippet

snippet hook_post_update_NAME "Executes an update which is intended to update data
 like entities."
/**
 * Implements hook_post_update_NAME().
 */
function hook_post_update_NAME(&$$sandbox) {
  $1
}
endsnippet

snippet hook_preprocess "Preprocess theme variables for templates."
/**
 * Implements hook_preprocess().
 */
function hook_preprocess(&$$variables
 $$hook) {
  $1
}
endsnippet

snippet hook_preprocess_HOOK "Preprocess theme variables for a specific theme hook."
/**
 * Implements hook_preprocess_HOOK().
 */
function hook_preprocess_HOOK(&$$variables) {
  $1
}
endsnippet

snippet hook_query_alter "Perform alterations to a structured query."
/**
 * Implements hook_query_alter().
 */
function hook_query_alter($$query) {
  $1
}
endsnippet

snippet hook_query_TAG_alter "Perform alterations to a structured query for a given tag."
/**
 * Implements hook_query_TAG_alter().
 */
function hook_query_TAG_alter($$query) {
  $1
}
endsnippet

snippet hook_queue_info_alter "Alter cron queue information before cron runs."
/**
 * Implements hook_queue_info_alter().
 */
function hook_queue_info_alter(&$$queues) {
  $1
}
endsnippet

snippet hook_quickedit_editor_alter "Allow modules to alter in-place editor plugin metadata."
/**
 * Implements hook_quickedit_editor_alter().
 */
function hook_quickedit_editor_alter(&$$editors) {
  $1
}
endsnippet

snippet hook_quickedit_render_field "Returns a renderable array for the value of a single field in an entity."
/**
 * Implements hook_quickedit_render_field().
 */
function hook_quickedit_render_field($$entity
 $$field_name
 $$view_mode_id
 $$langcode) {
  $1
}
endsnippet

snippet hook_ranking "Provide additional methods of scoring for core search results for nodes."
/**
 * Implements hook_ranking().
 */
function hook_ranking() {
  $1
}
endsnippet

snippet hook_rdf_namespaces "Allow modules to define namespaces for RDF mappings."
/**
 * Implements hook_rdf_namespaces().
 */
function hook_rdf_namespaces() {
  $1
}
endsnippet

snippet hook_rebuild "Rebuild data based upon refreshed caches."
/**
 * Implements hook_rebuild().
 */
function hook_rebuild() {
  $1
}
endsnippet

snippet hook_render_template "Render a template using the theme engine."
/**
 * Implements hook_render_template().
 */
function hook_render_template($$template_file
 $$variables) {
  $1
}
endsnippet

snippet hook_requirements "Check installation requirements and do status reporting."
/**
 * Implements hook_requirements().
 */
function hook_requirements($$phase) {
  $1
}
endsnippet

snippet hook_rest_relation_uri_alter "Deprecated: Alter the REST relation URI."
/**
 * Implements hook_rest_relation_uri_alter().
 */
function hook_rest_relation_uri_alter(&$$uri
 $$context = []) {
  $1
}
endsnippet

snippet hook_rest_resource_alter "Alter the resource plugin definitions."
/**
 * Implements hook_rest_resource_alter().
 */
function hook_rest_resource_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_rest_type_uri_alter "Deprecated: Alter the REST type URI."
/**
 * Implements hook_rest_type_uri_alter().
 */
function hook_rest_type_uri_alter(&$$uri
 $$context = []) {
  $1
}
endsnippet

snippet hook_schema "Define the current version of the database schema."
/**
 * Implements hook_schema().
 */
function hook_schema() {
  $1
}
endsnippet

snippet hook_search_plugin_alter "Alter search plugin definitions."
/**
 * Implements hook_search_plugin_alter().
 */
function hook_search_plugin_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_search_preprocess "Preprocess text for search."
/**
 * Implements hook_search_preprocess().
 */
function hook_search_preprocess($$text
 $$langcode) {
  $1
}
endsnippet

snippet hook_shortcut_default_set "Return the name of a default shortcut set for the provided user account."
/**
 * Implements hook_shortcut_default_set().
 */
function hook_shortcut_default_set($$account) {
  $1
}
endsnippet

snippet hook_simpletest_alter "Deprecated: Alter the list of tests."
/**
 * Implements hook_simpletest_alter().
 */
function hook_simpletest_alter(&$$groups) {
  $1
}
endsnippet

snippet hook_system_breadcrumb_alter "Perform alterations to the breadcrumb built by the BreadcrumbManager."
/**
 * Implements hook_system_breadcrumb_alter().
 */
function hook_system_breadcrumb_alter(&$$breadcrumb
 $$route_match
 $$context) {
  $1
}
endsnippet

snippet hook_system_info_alter "Alter the information parsed from module and theme .info.yml files."
/**
 * Implements hook_system_info_alter().
 */
function hook_system_info_alter(&$$info
 $$file
 $$type) {
  $1
}
endsnippet

snippet hook_system_themes_page_alter "Alters theme operation links."
/**
 * Implements hook_system_themes_page_alter().
 */
function hook_system_themes_page_alter(&$$theme_groups) {
  $1
}
endsnippet

snippet hook_template_preprocess_default_variables_alter "Alters theme operation links."
/**
 * Implements hook_template_preprocess_default_variables_alter().
 */
function hook_template_preprocess_default_variables_alter(&$$variables) {
  $1
}
endsnippet

snippet hook_test_finished "An individual test has finished."
/**
 * Implements hook_test_finished().
 */
function hook_test_finished($$results) {
  $1
}
endsnippet

snippet hook_test_group_finished "A test group has finished."
/**
 * Implements hook_test_group_finished().
 */
function hook_test_group_finished() {
  $1
}
endsnippet

snippet hook_test_group_started "A test group has started."
/**
 * Implements hook_test_group_started().
 */
function hook_test_group_started() {
  $1
}
endsnippet

snippet hook_theme "Register a module or theme's theme implementations."
/**
 * Implements hook_theme().
 */
function hook_theme($$existing
 $$type
 $$theme
 $$path) {
  $1
}
endsnippet

snippet hook_themes_installed "Respond to themes being installed."
/**
 * Implements hook_themes_installed().
 */
function hook_themes_installed($$theme_list) {
  $1
}
endsnippet

snippet hook_themes_uninstalled "Respond to themes being uninstalled."
/**
 * Implements hook_themes_uninstalled().
 */
function hook_themes_uninstalled($$themes) {
  $1
}
endsnippet

snippet hook_theme_registry_alter "Alter the theme registry information returned from hook_theme()."
/**
 * Implements hook_theme_registry_alter().
 */
function hook_theme_registry_alter(&$$theme_registry) {
  $1
}
endsnippet

snippet hook_theme_suggestions_alter "Alters named suggestions for all theme hooks."
/**
 * Implements hook_theme_suggestions_alter().
 */
function hook_theme_suggestions_alter(&$$suggestions
 $$variables
 $$hook) {
  $1
}
endsnippet

snippet hook_theme_suggestions_HOOK "Provides alternate named suggestions for a specific theme hook."
/**
 * Implements hook_theme_suggestions_HOOK().
 */
function hook_theme_suggestions_HOOK($$variables) {
  $1
}
endsnippet

snippet hook_theme_suggestions_HOOK_alter "Provides alternate named suggestions for a specific theme hook."
/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hook_theme_suggestions_HOOK_alter(&$$suggestions
 $$variables) {
  $1
}
endsnippet

snippet hook_tokens "Provide replacement values for placeholder tokens."
/**
 * Implements hook_tokens().
 */
function hook_tokens($$type
 $$tokens
 $$data
 $$options
 $$bubbleable_metadata) {
  $1
}
endsnippet

snippet hook_tokens_alter "Alter replacement values for placeholder tokens."
/**
 * Implements hook_tokens_alter().
 */
function hook_tokens_alter(&$$replacements
 $$context
 $$bubbleable_metadata) {
  $1
}
endsnippet

snippet hook_toolbar "Add items to the toolbar menu."
/**
 * Implements hook_toolbar().
 */
function hook_toolbar() {
  $1
}
endsnippet

snippet hook_toolbar_alter "Alter the toolbar menu after hook_toolbar() is invoked."
/**
 * Implements hook_toolbar_alter().
 */
function hook_toolbar_alter(&$$items) {
  $1
}
endsnippet

snippet hook_tour_tips_alter "Allow modules to alter tour items before render."
/**
 * Implements hook_tour_tips_alter().
 */
function hook_tour_tips_alter(&$$tour_tips
 $$entity) {
  $1
}
endsnippet

snippet hook_tour_tips_info_alter "Allow modules to alter tip plugin definitions."
/**
 * Implements hook_tour_tips_info_alter().
 */
function hook_tour_tips_info_alter(&$$info) {
  $1
}
endsnippet

snippet hook_transliteration_overrides_alter "Provide language-specific overrides for transliteration."
/**
 * Implements hook_transliteration_overrides_alter().
 */
function hook_transliteration_overrides_alter(&$$overrides
 $$langcode) {
  $1
}
endsnippet

snippet hook_uninstall "Remove any information that the module sets."
/**
 * Implements hook_uninstall().
 */
function hook_uninstall() {
  $1
}
endsnippet

snippet hook_updater_info "Provide information on Updaters (classes that can update Drupal)."
/**
 * Implements hook_updater_info().
 */
function hook_updater_info() {
  $1
}
endsnippet

snippet hook_uhook_updater_info_alterpdater_info "Alter the Updater information array."
/**
 * Implements hook_updater_info_alter().
 */
function hook_updater_info_alter(&$$updaters) {
  $1
}
endsnippet

snippet hook_update_dependencies "Return an array of information about module update dependencies."
/**
 * Implements hook_update_dependencies().
 */
function hook_update_dependencies() {
  $1
}
endsnippet

snippet hook_update_last_removed "Return a number which is no longer available as hook_update_N()."
/**
 * Implements hook_update_last_removed().
 */
function hook_update_last_removed() {
  $1
}
endsnippet

snippet hook_update_N "Perform a single update between minor versions."
/**
 * Implements hook_update_N().
 */
function hook_update_N(&$$sandbox) {
  $1
}
endsnippet

snippet hook_update_projects_alter "Alter the list of projects before fetching data and comparing versions."
/**
 * Implements hook_update_projects_alter().
 */
function hook_update_projects_alter(&$$projects) {
  $1
}
endsnippet

snippet hook_update_status_alter "Alter the information about available updates for projects."
/**
 * Implements hook_update_status_alter().
 */
function hook_update_status_alter(&$$projects) {
  $1
}
endsnippet

snippet hook_user_cancel "Act on user account cancellations."
/**
 * Implements hook_user_cancel().
 */
function hook_user_cancel($$edit
 $$account
 $$method) {
  $1
}
endsnippet

snippet hook_user_cancel_methods_alter "Modify account cancellation methods."
/**
 * Implements hook_user_cancel_methods_alter().
 */
function hook_user_cancel_methods_alter(&$$methods) {
  $1
}
endsnippet

snippet hook_user_format_name_alter "Alter the username that is displayed for a user."
/**
 * Implements hook_user_format_name_alter().
 */
function hook_user_format_name_alter(&$$name
 $$account) {
  $1
}
endsnippet

snippet hook_user_login "The user just logged in."
/**
 * Implements hook_user_login().
 */
function hook_user_login($$account) {
  $1
}
endsnippet

snippet hook_user_logout "The user just logged out."
/**
 * Implements hook_user_logout().
 */
function hook_user_logout($$account) {
  $1
}
endsnippet

snippet hook_validation_constraint_alter "Alter validation constraint plugin definitions."
/**
 * Implements hook_validation_constraint_alter().
 */
function hook_validation_constraint_alter(&$$definitions) {
  $1
}
endsnippet

snippet hook_verify_update_archive "Verify an archive after it has been downloaded and extracted."
/**
 * Implements hook_verify_update_archive().
 */
function hook_verify_update_archive($$project
 $$archive_file
 $$directory) {
  $1
}
endsnippet

snippet hook_views_analyze "Analyze a view to provide warnings about its configuration."
/**
 * Implements hook_views_analyze().
 */
function hook_views_analyze($$view) {
  $1
}
endsnippet

snippet hook_views_data "Describe data tables and fields (or the equivalent) to Views."
/**
 * Implements hook_views_data().
 */
function hook_views_data() {
  $1
}
endsnippet

snippet hook_views_data_alter "Alter the table and field information from hook_views_data()."
/**
 * Implements hook_views_data_alter().
 */
function hook_views_data_alter(&$$data) {
  $1
}
endsnippet

snippet hook_views_form_substitutions "Replace special strings when processing a view with form elements."
/**
 * Implements hook_views_form_substitutions().
 */
function hook_views_form_substitutions() {
  $1
}
endsnippet

snippet hook_views_invalidate_cache "Allow modules to respond to the invalidation of the Views cache."
/**
 * Implements hook_views_invalidate_cache().
 */
function hook_views_invalidate_cache() {
  $1
}
endsnippet

snippet hook_views_plugins_access_alter "Modify the list of available views access plugins."
/**
 * Implements hook_views_plugins_access_alter().
 */
function hook_views_plugins_access_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_area_alter "Modify the list of available views area handler plugins."
/**
 * Implements hook_views_plugins_area_alter().
 */
function hook_views_plugins_area_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_argument_alter "Modify the list of available views argument handler plugins."
/**
 * Implements hook_views_plugins_argument_alter().
 */
function hook_views_plugins_argument_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_argument_default_alter "Modify the list of available views default argument plugins."
/**
 * Implements hook_views_plugins_argument_default_alter().
 */
function hook_views_plugins_argument_default_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_argument_validator_alter "Modify the list of available views argument validation plugins."
/**
 * Implements hook_views_plugins_argument_validator_alter().
 */
function hook_views_plugins_argument_validator_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_cache_alter "Modify the list of available views cache plugins."
/**
 * Implements hook_views_plugins_cache_alter().
 */
function hook_views_plugins_cache_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_display_alter "Modify the list of available views display plugins."
/**
 * Implements hook_views_plugins_display_alter().
 */
function hook_views_plugins_display_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_display_extenders_alter "Modify the list of available views display extender plugins."
/**
 * Implements hook_views_plugins_display_extenders_alter().
 */
function hook_views_plugins_display_extenders_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_exposed_form_alter "Modify the list of available views exposed form plugins."
/**
 * Implements hook_views_plugins_exposed_form_alter().
 */
function hook_views_plugins_exposed_form_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_field_alter "Modify the list of available views field handler plugins."
/**
 * Implements hook_views_plugins_field_alter().
 */
function hook_views_plugins_field_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_join_alter "Modify the list of available views join plugins."
/**
 * Implements hook_views_plugins_join_alter().
 */
function hook_views_plugins_join_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_pager_alter "Modify the list of available views pager plugins."
/**
 * Implements hook_views_plugins_pager_alter().
 */
function hook_views_plugins_pager_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_query_alter "Modify the list of available views query plugins."
/**
 * Implements hook_views_plugins_query_alter().
 */
function hook_views_plugins_query_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_relationship_alter "Modify the list of available views relationship handler plugins."
/**
 * Implements hook_views_plugins_relationship_alter().
 */
function hook_views_plugins_relationship_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_row_alter "Modify the list of available views row plugins."
/**
 * Implements hook_views_plugins_row_alter().
 */
function hook_views_plugins_row_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_sort_alter "Modify the list of available views sort handler plugins."
/**
 * Implements hook_views_plugins_sort_alter().
 */
function hook_views_plugins_sort_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_style_alter "Modify the list of available views style plugins."
/**
 * Implements hook_views_plugins_style_alter().
 */
function hook_views_plugins_style_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_plugins_wizard_alter "Modify the list of available views wizard plugins."
/**
 * Implements hook_views_plugins_wizard_alter().
 */
function hook_views_plugins_wizard_alter(&$$plugins) {
  $1
}
endsnippet

snippet hook_views_post_build "Act on the view immediately after the query is built."
/**
 * Implements hook_views_post_build().
 */
function hook_views_post_build($$view) {
  $1
}
endsnippet

snippet hook_views_post_execute "Act on the view immediately after the query has been executed."
/**
 * Implements hook_views_post_execute().
 */
function hook_views_post_execute($$view) {
  $1
}
endsnippet

snippet hook_views_post_render "Post-process any rendered data."
/**
 * Implements hook_views_post_render().
 */
function hook_views_post_render($$view
 &$$output
 $$cache) {
  $1
}
endsnippet

snippet hook_views_preview_info_alter "Alter the view preview information."
/**
 * Implements hook_views_preview_info_alter().
 */
function hook_views_preview_info_alter(&$$rows
 $$view) {
  $1
}
endsnippet

snippet hook_views_pre_build "Act on the view before the query is built
 but after displays are attached."
/**
 * Implements hook_views_pre_build().
 */
function hook_views_pre_build($$view) {
  $1
}
endsnippet

snippet hook_views_pre_execute "Act on the view after the query is built and just before it is executed."
/**
 * Implements hook_views_pre_execute().
 */
function hook_views_pre_execute($$view) {
  $1
}
endsnippet

snippet hook_views_pre_render "Act on the view immediately before rendering it."
/**
 * Implements hook_views_pre_render().
 */
function hook_views_pre_render($$view) {
  $1
}
endsnippet

snippet hook_views_pre_view "Alter a view at the very beginning of Views processing."
/**
 * Implements hook_views_pre_view().
 */
function hook_views_pre_view($$view
 $$display_id
 &$$args) {
  $1
}
endsnippet

snippet hook_views_query_alter "Alter the query before it is executed."
/**
 * Implements hook_views_query_alter().
 */
function hook_views_query_alter($$view
 $$query) {
  $1
}
endsnippet

snippet hook_views_query_substitutions "Replace special strings in the query before it is executed."
/**
 * Implements hook_views_query_substitutions().
 */
function hook_views_query_substitutions($$view) {
  $1
}
endsnippet

snippet hook_views_ui_display_top_links_alter "Alter the links displayed at the top of the view edit form."
/**
 * Implements hook_views_ui_display_top_links_alter().
 */
function hook_views_ui_display_top_links_alter($$view) {
  $1
}
endsnippet
